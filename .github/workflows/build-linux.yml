name: Build and Release (Linux)

on:
  # Dispare em push na branch main e tags
  push:
    branches: 
      - linux-release
    tags: [ "*" ]
    paths:
      - 'MarkViewDesktop/**' 
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      # 1) Checkout do repositório
      - name: Check out repository
        uses: actions/checkout@v3

      # 2) Configurar Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"  

      # 3) Instalar dependências
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r MarkViewDesktop/requirements.txt
          pip install pyinstaller

      # 4) Build com PyInstaller
      - name: Build with PyInstaller
        run: |
           pyinstaller --onefile MarkViewDesktop/main.py \
            --name markview  
           ls dist  

      # 5) Criar ou atualizar uma Release no GitHub
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v0.1.0   # Defina ou gere a versão dinamicamente (ex. via semver)
          release_name: "Linux Release v0.1.0"
          draft: false       # true se quiser criar como rascunho
          prerelease: false  # true se for um pré-lançamento
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}

      # 6) Fazer upload do binário gerado na release
      - name: Upload to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/main  # Caminho do arquivo gerado pelo PyInstaller (sem extensão no Linux)
          asset_name: "markview-linux"  # Nome que aparecerá na Release
          asset_content_type: application/octet-stream
